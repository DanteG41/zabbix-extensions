# get sysctl variables
UserParameter=sysctl[*],sysctl $1 |awk '{print $$3}'
# memory 
UserParameter=system.pmemusage,/usr/libexec/zabbix-extensions/scripts/mem-usage.sh
# swap discovery
UserParameter=swap.discovery,/usr/libexec/zabbix-extensions/scripts/swap.discovery.sh
# cft-check
UserParameter=cfe.state,/bin/bash -c '[[ $(/usr/sbin/check-cft) == "OK - no changes" ]] && echo 0 || echo 1'
# check network interfaces speed
UserParameter=net.if.discovery.active,/usr/libexec/zabbix-extensions/scripts/check-netif-speed.sh --discovery
UserParameter=net.if.speed[*],/usr/libexec/zabbix-extensions/scripts/check-netif-speed.sh --check=$1
# count open files. first and single parameter is pidfile location (also require granted sudo privileges to zabbix user).
UserParameter=count.openfiles[*],/usr/bin/sudo /usr/bin/lsof -nPp $(cat $1) |tail -n +2 |wc -l
# cave report
UserParameter=cave.pkg.discovery,/usr/libexec/zabbix-extensions/scripts/cave-pkg-discovery.sh
UserParameter=cave.pkg.stat[*],/usr/bin/cave-report.sh|grep $1|awk '{print $$1}'
# check process
UserParameter=proc.num.pidfile[*],pid=$(cat $1) && ps acx|awk -v apid=$pid '{if ( $$1 == apid ) count++} END {print count}' || echo 0
# OOM check
UserParameter=system.oom_count,/bin/bash -c 'dmesg -l err|grep -c "Out of memory"'
# Let's measure dropped packets on interface.
UserParameter=net.if.drop.in[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$5}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.if.drop.out[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$13}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# Then, we want to see an errors,
UserParameter=net.if.err.in[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$4}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.if.err.out[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$12}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# collisions...
UserParameter=net.if.coll.out[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$15}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# and carrier failures.
UserParameter=net.if.carr.out[*],r=$(cat /proc/net/dev|awk '{if ( $$1 == "$1:" ) {print $$16}}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# UDP datagram I/O stats
UserParameter=net.udp.data.in,r=$(cat /proc/net/snmp|awk '/^Udp:/ {getline; print $2}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.udp.data.out,r=$(cat /proc/net/snmp|awk '/^Udp:/ {getline; print $5}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# TCP segment I/O stats
UserParameter=net.tcp.seg.in,r=$(cat /proc/net/snmp|awk '/^Tcp:/ {getline; print $11}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.tcp.seg.out,r=$(cat /proc/net/snmp|awk '/^Tcp:/ {getline; print $12}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# TCP connection stats. Possible flags:
# '01',  =>  TCP_ESTABLISHED
# '02',  =>  TCP_SYN_SENT
# '03',  =>  TCP_SYN_RECV
# '04',  =>  TCP_FIN_WAIT1
# '05',  =>  TCP_FIN_WAIT2
# '06',  =>  TCP_TIME_WAIT
# '07',  =>  TCP_CLOSE
# '08',  =>  TCP_CLOSE_WAIT
# '09',  =>  TCP_LAST_ACK
# '0A',  =>  TCP_LISTEN
# '0B',  =>  TCP_CLOSING
UserParameter=net.tcp.conn.stat[*],r=$(cat /proc/net/tcp|awk '{if ( $$4 == "$1" ){ count++}} END {print count}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# Broadcast packet I/O stats
UserParameter=net.bcast.pkt.in,r=$(cat /proc/net/netstat|awk '/^IpExt:/ {getline; print $6}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.bcast.pkt.out,r=$(cat /proc/net/netstat|awk '/^IpExt:/ {getline; print $7}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
# Multicast packet I/O stats
UserParameter=net.mcast.pkt.in,r=$(cat /proc/net/netstat|awk '/^IpExt:/ {getline; print $4}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1
UserParameter=net.mcast.pkt.out,r=$(cat /proc/net/netstat|awk '/^IpExt:/ {getline; print $5}'); [[ -z "$r" ]] && echo ZBX_NOTSUPPORTED || echo $r|head -n 1

